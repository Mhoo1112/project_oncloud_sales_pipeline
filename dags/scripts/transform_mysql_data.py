import os
import pandas
import datetime
from airflow.models import Variable
from google.cloud import storage
from scripts.log_start_log_end import log_start
from scripts.log_start_log_end import log_end

def transform_mysql_data():
    """
    ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MySQL ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å Customer ID ‡πÅ‡∏•‡∏∞ Customer Name
    """
    log_start()
    today = datetime.date.today().strftime("%Y-%m-%d")
    # ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    tmp_path = f"/tmp"
    output_path = f"output/"
    local_tmp = None

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Variable
    bucket_name = Variable.get("GCP_BUCKET_NAME")
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google
    client = storage.Client()
    bucket = client.get_bucket(bucket_name)    
    blobs = client.list_blobs(bucket, prefix=output_path) # bucket_name/output/

    for blob in blobs: # blobs = client.list_blobs(bucket, prefix=output_path)
        blob_name = blob.name.split("/")[-1]
        if blob_name.startswith(f"mysql_customers_products_") and blob_name.endswith(f"{today}.parquet"):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            local_tmp = os.path.join(tmp_path, blob_name)
            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å GCS ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà local tmp ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ pandas
            blob.download_to_filename(local_tmp)
            break  # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    if local_tmp is None:
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå mysql_customers_products_{today}.parquet ‡πÉ‡∏ô GCS")


    # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pandas.read_parquet(local_tmp)
    summary_df_01 = df.groupby(["customer_id",
                                "customer_name"]).agg({"price": "sum"}).reset_index()
    print("\nüìä Summary by Customer --------------------")
    print(summary_df_01)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
    output_csv_tmp = os.path.join(tmp_path, f"tmp_mysql_report_{today}.csv")
    output_parq_tmp = os.path.join(tmp_path, f"tmp_mysql_report_{today}.parquet")

    summary_df_01.to_csv(output_csv_tmp, index=False)
    summary_df_01.to_parquet(output_parq_tmp)

    print(f"üíæ Saved: {output_csv_tmp}")
    print(f"üíæ Saved: {output_parq_tmp}")

    bucket.blob(os.path.join(output_path,f"mysql_report_{today}.csv")).upload_from_filename(output_csv_tmp)
    bucket.blob(os.path.join(output_path,f"mysql_report_{today}.parquet")).upload_from_filename(output_parq_tmp)
    log_end()
    return summary_df_01
