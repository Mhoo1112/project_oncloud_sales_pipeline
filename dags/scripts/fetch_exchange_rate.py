import os
import requests
import pandas
import datetime
from google.cloud import storage
from airflow.models import Variable
from scripts.log_start_log_end import log_start
from scripts.log_start_log_end import log_end

def fetch_usd_to_thb():
    """
        ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Convertion Rate ‡∏à‡∏≤‡∏Å API/
    """
    log_start()

    # ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• URL ‡∏Ç‡∏≠‡∏á Exchange ‡∏î‡πâ‡∏ß‡∏¢ Variable
    url = Variable.get("EXCHANGE_RATE_API")
    print("‚úÖ DEBUG URL:", url)

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
    response = requests.get(url)

    # ‡πÅ‡∏õ‡∏•‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô dictionary
    exchange_rate_data = response.json()

    if "conversion_rates" not in exchange_rate_data:
        raise KeyError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö key 'conversion_rates' ‡πÉ‡∏ô response")
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å raise ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î

    exchange_df = pandas.DataFrame.from_dict(
        exchange_rate_data["conversion_rates"],  # ‡∏î‡∏∂‡∏á dict ‡∏Ç‡∏≠‡∏á conversion_rates
        orient="index",  # ‡πÉ‡∏´‡πâ key ‡πÄ‡∏õ‡πá‡∏ô index ‡πÅ‡∏ï‡πà‡∏•‡∏∞ key ‡πÉ‡∏ô dictionary ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô index (‡πÅ‡∏ñ‡∏ß) ‡πÅ‡∏ï‡πà‡∏•‡∏∞ value ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß
        columns=["rate"]  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ column value ‡πÄ‡∏õ‡πá‡∏ô rate
    ).reset_index().rename(columns={"index": "currency"})
    
    # exchange_df = pandas.DataFrame(
    #     exchange_rate_data["conversion_rates"].items(),  # ‚Üí List of tuples
    #     columns=["currency", "rate"]
    # )

    #  "time_last_update_utc":"Wed, 06 Aug 2025 00:00:01 +0000",
    time_str = exchange_rate_data["time_last_update_utc"]
    formats = [
        "%a, %d %b %Y %H:%M:%S %z",
        "%d %b %Y %H:%M:%S",
        "%d %m %Y %H:%M:%S",
        "%Y %m %d %H:%M:%S",
        "%Y %m %d",
        "%d %m %Y"
    ]

    for fmt in formats:
        try:
            time_obj = datetime.datetime.strptime(time_str, fmt)
            break
        except ValueError:
            continue
    else:
        raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {time_str}")

    exchange_df["date"] = time_obj.strftime("%Y-%m-%d")

    # from datetime import datetime
    # exchange_df["date"] = datetime.now()
    # exchange_df["date"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    print("\n‚úÖ rate:")
    print(exchange_df)

    if "THB" not in exchange_rate_data["conversion_rates"]:
        raise KeyError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ THB ‡πÉ‡∏ô conversion_rates")

    # Filter ‡∏Ñ‡πà‡∏≤ THB ‡∏à‡∏≤‡∏Å DataFrame
    thb_df = exchange_df[exchange_df["currency"] == "THB"].reset_index(drop=True)
    thb_value = thb_df["rate"].values[0]
    print("\n ‡∏≠‡∏±‡∏ï‡∏£‡∏≤ THB ‡∏à‡∏≤‡∏Å DataFrame:")
    print(thb_df)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Variable
    bucket_name = Variable.get("GCP_BUCKET_NAME")
    
    # ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    tmp_path = "/tmp"
    output_path = "output/" 
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πâ‡πà‡∏≤ Google Client
    client = storage.Client()
    bucket = client.bucket(bucket_name)

    try:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞ parquet
        today = datetime.date.today().strftime("%Y-%m-%d")
        out_csv_local = os.path.join(tmp_path, "fetch_exchange_rate.csv")
        out_parq_local = os.path.join(tmp_path, "fetch_exchange_rate.parquet")

        exchange_df.to_csv(out_csv_local, index=False)
        exchange_df.to_parquet(out_parq_local)

        print(f"üíæ Saved: {out_csv_local}")
        print(f"üíæ Saved: {out_parq_local}")

        # gcs_filename = f"fetch_exchange_rate_{today}.csv"
        # bucket.blob(os.path.join(output_path,gcs_filename)).upload_from_filename(out_csv_local)
        bucket.blob(os.path.join(output_path,f"fetch_exchange_rate_{today}.csv")).upload_from_filename(out_csv_local)
        bucket.blob(os.path.join(output_path,f"fetch_exchange_rate_{today}.parquet")).upload_from_filename(out_parq_local)

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)

    log_end()
    return thb_value